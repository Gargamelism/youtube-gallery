# YAML anchors for shared environment variables
x-backend-env: &backend-env
  DEBUG: True
  DB_HOST: db
  DB_NAME: postgres
  DB_USER: postgres
  DB_PASSWORD: postgres
  DB_PORT: 5432
  REDIS_HOST: redis
  REDIS_PORT: 6379
  REDIS_DB: 0
  REDIS_PASSWORD: ${REDIS_PASSWORD:-default_dev_password}
  REDIS_USER: youtube_app
  YOUTUBE_CREDENTIALS_DIR: /app/config/credentials
  YOUTUBE_CLIENT_SECRET_FILE: client_secret.json
  YOUTUBE_TOKEN_FILE: token.json
  FRONTEND_URL: http://localhost:3000

x-test-env: &test-env
  TESTING: 1
  PYTHONPATH: /app
  DJANGO_SETTINGS_MODULE: youtube_gallery.settings
  DB_HOST: db
  DB_NAME: postgres
  DB_USER: postgres
  DB_PASSWORD: postgres
  DB_PORT: 5432

services:
  # Redis Cache
  redis:
    image: redis:7-alpine
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-default_dev_password}
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - youtube_gallery_network
    command: >
      sh -c "
      sed 's/REDIS_PASSWORD_PLACEHOLDER/'\"$$REDIS_PASSWORD\"'/' /usr/local/etc/redis/redis.conf > /tmp/redis.conf &&
      redis-server /tmp/redis.conf
      "

  # PostgreSQL Database
  db:
    image: postgres:15
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - '5432:5432'
    networks:
      - youtube_gallery_network

  # Django Backend Tests
  backend_test:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: test
    working_dir: /app
    profiles: ['test']
    environment: *test-env
    volumes:
      - ./backend:/app
    ports:
      - '5679:5679' # debugpy port for test debugging
    depends_on:
      - db
      - redis
    networks:
      - youtube_gallery_network
    # Exit after running tests (or debug mode)
    command: sh -c "python -m pytest -v && python manage.py test --verbosity=2"
    # Don't restart
    restart: 'no'

  # Django Backend (Development with hot reload)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    environment: *backend-env
    volumes:
      - ./backend:/app
    ports:
      - '8000:8000'
      - '5678:5678' # debugpy port for VS Code debugging
    depends_on:
      - db
      - redis
    networks:
      - youtube_gallery_network
    command: >
      sh -c "/usr/local/bin/python manage.py makemigrations videos &&
             /usr/local/bin/python manage.py migrate &&
             /usr/local/bin/python manage.py setup_periodic_tasks &&
             /usr/local/bin/python manage.py collectstatic --noinput &&
             /usr/local/bin/python -m debugpy --listen 0.0.0.0:5678 manage.py runserver 0.0.0.0:8000 --noreload"
    # Note: Add --wait-for-client after debugpy if you need to debug Django startup code
    stdin_open: true
    tty: true

  # Celery Worker
  celery_worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    environment: *backend-env
    volumes:
      - ./backend:/app
    depends_on:
      - db
      - redis
    networks:
      - youtube_gallery_network
    command: celery -A youtube_gallery worker --loglevel=info --concurrency=2
    restart: unless-stopped

  # Celery Beat (Task Scheduler)
  celery_beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    environment: *backend-env
    volumes:
      - ./backend:/app
    depends_on:
      - db
      - redis
      - celery_worker
    networks:
      - youtube_gallery_network
    command: celery -A youtube_gallery beat --loglevel=info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    restart: unless-stopped

  # Celery Flower (Monitoring)
  celery_flower:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    environment: *backend-env
    volumes:
      - ./backend:/app
    ports:
      - '5555:5555'
    depends_on:
      - redis
      - celery_worker
    networks:
      - youtube_gallery_network
    command: celery -A youtube_gallery flower --address=0.0.0.0 --port=5555
    restart: unless-stopped

  # Next.js Frontend (Development with hot reload)
  frontend:
    build:
      context: .
      dockerfile: frontend.Dockerfile
    ports:
      - '3000:3000'
    volumes:
      - .:/app
      - /app/node_modules
      - /app/.next
    environment:
      - BE_PUBLIC_API_URL=http://localhost:8000/api
      - WATCHPACK_POLLING=true
    command: npm run dev
    depends_on:
      - backend
    networks:
      - youtube_gallery_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  youtube_gallery_network:
    driver: bridge
